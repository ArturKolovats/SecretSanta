import {useState} from 'react';
import {db} from '../firebaseConfig';
import { getDatabase,ref,set,once,on,update,onValue} from 'firebase/database';
import { nanoid } from 'nanoid'
import Nav from '../components/nav'
import ChristmasLights from '../components/christmasLights';
import React, { useRef } from "react";
import emailjs from "@emailjs/browser";
import Description from '../components/description';
import Image from 'next/image'
import leaf from '../img/leaf.png'

export default function Home() {


  const [isShownCreateModal, setisShownCreateModal] = useState(false);
  const [isShownConnectWindow, setIsShownConnectWindow] = useState(false);
  const [isShownStartModal, setisShownStartModal] = useState(false);
  const [ShownMailsModal,setShownMailsModal] = useState(false);
  const [allPlayers, setAllPlayers] = useState([])
  const [budget,setBudget] = useState('')
  const [name, setName] = useState('')
  const [mail, setMail] = useState('')
  const [code,setCode] = useState('')
  const [rooms,setRooms] = useState('')
  const [id,setId] = useState(0)
  const [connectModalWindowTextContent,setconnectModalWindowTextContent] = useState('')
  const [createModalWindowTextContent,setcreateModalWindowTextContent] = useState('')
  const [startModalWindowTextContent,setstartModalWindowTextContent] = useState('')
  const [emailsModalWindowTextContent,setemailsModalWindowTextContent] = useState('')
  const [btnClassChangeDoneMailResult,setbtnClassChangeDoneMailResult] = useState('start-btn')

  //—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏ 
  const closeCreateModalWindow = event => {
    setId(nanoid(5))
    if (mail == '' || budget == '' || name == '') {
      setcreateModalWindowTextContent('–≤–∏ –Ω–µ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ —É—Å—ñ –ø–æ–ª—è')
    }
    setisShownCreateModal(current => !current);


  };
  const createForm = async (event) => {
  
    
    event.preventDefault()

    // Get data from the form.
    const data = {
      name: event.target.name.value,
      mail: event.target.mail.value,
      budget: event.target.budget.value,
    }

    if (mail == '' || budget == '' || name == '') {
      console.log('–≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ')
    }else {
      setcreateModalWindowTextContent(`–≥—Ä—É–ø—É —Å—Ç–≤–æ—Ä–µ–Ω–æ, –≤–∞—à –∫–æ–¥ - ${id}`)
      createRommFirebase()
    }
    
    
    //Firebase data save - rooms
    async function createRommFirebase() {
      const reference = ref(db, 'room/');
      update(reference,{
        [id]: {
            "players":{
              [data.name]:{
                playerName:`${data.name}~${data.mail}`
              } 
            },
            owner:`${data.name}~${data.mail}`,
            price:data.budget,
            id:id
        }
      })
    }
   

  }

  //–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏
  const closeConnectModalWindow = event => {
 
    if (mail == '' || budget == '' || name == '') {
      setconnectModalWindowTextContent('–≤–∏ –Ω–µ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ —É—Å—ñ –ø–æ–ª—è')
    }
    setIsShownConnectWindow(current => !current);  

  };

  const connectForm = async (event) => {

  event.preventDefault()
  function isValidKey(key) {
    // Return false if the key is an empty string or contains an invalid character
    return key !== "" && !/[.#\$\/\[\]]/.test(key);
  }

  // Get data from the form.

      if (mail == '' || code == '' || name == '') {
        console.log('–≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ')
      }else {
            console.log(name)
            setconnectModalWindowTextContent('–≥–æ—Ç–æ–≤–æ')
            const reference = ref(db, 'room/' + `${code}/` + 'players/');
            if (isValidKey(name)) {
              update(reference,{
                [name]: {
                  playerName:`${name}~${mail}`
                }
              
            })
            } else {
              console.log('–ø—Ä–∏—Å—É—Ç–Ω—ñ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏')
              setconnectModalWindowTextContent('–ü—Ä–∏—Å—É—Ç–Ω—ñ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏ .#\$\/\[\]')

            }
          
    
  }

  }

  //—Å—Ç–∞—Ä—Ç –≥—Ä–∏
  const closeStartModalWindow = event => {
    // setId(nanoid(5))
    // üëáÔ∏è toggle visibility
    if (code == '') {
      setstartModalWindowTextContent('–≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥')
    }
    setisShownStartModal(current => !current);
    
  };
  const startForm = async (event) => {
  setAllPlayers([])

  event.preventDefault()
  const data = {
    code: event.target.code.value
  }
  
  if (data.code === '') {
    setstartModalWindowTextContent('–≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥')
    setbtnClassChangeDoneMailResult('none')

  }else {
    const reference = ref(db, 'room/' + `${data.code}/`);
    onValue(reference, (el) => {
      try {
       
    setstartModalWindowTextContent(
      `
    –ø–µ—Ä–µ–≤—ñ—Ä—å—Ç–µ —á–∏ –≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ —î —É –≥—Ä—ñ, —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—å—Ç–µ —á–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–π —î –ø–∞—Ä–Ω–æ—é, —â–æ–± —Ö—Ç–æ—Å—å –Ω–µ –∑–∞–ª–∏—à–∏–≤—Å—è –±–µ–∑ –ø–æ–¥–∞—Ä—É–Ω–∫–∞.
    –Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ - –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ
      `
    )
    setbtnClassChangeDoneMailResult('start-btn')

      startRommFirebase()
      }catch(err){
      console.log('–∫–æ–¥ –Ω–µ –≤—ñ—Ä–Ω–∏–π')
      setstartModalWindowTextContent('–≥—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–≤—ñ—Ä—å—Ç–µ –∫–æ–¥')
      setbtnClassChangeDoneMailResult('none')
      }

});
  }
  
  async function startRommFirebase() {

  const referenceRoom = ref(db, 'room/' + `${data.code}/`);
  let arr = []
  onValue(referenceRoom, (el) => {
    for ( var key in el.val().players){
      arr.push(el.val().players[key].playerName)
      
    }
    localStorage.setItem('allPlayers', JSON.stringify(arr));
    const players = JSON.parse(localStorage.getItem('allPlayers'));
    if (players) {
      setAllPlayers(players);
    }
    localStorage.setItem('price', JSON.stringify(el.val().price));
    const budget = JSON.parse(localStorage.getItem('price'));
    if (budget) {
      setBudget(budget);
    }
  });
}
  }
  
  //—Å—Ç–∞—Ä—Ç –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
  const startEmailsGame = event => {
    const players = JSON.parse(localStorage.getItem('allPlayers'));
    if ( players.length  % 2 === 0 ){  
    setstartModalWindowTextContent('–≥–æ—Ç–æ–≤–æ')
    setbtnClassChangeDoneMailResult('none')

  //  allPlayers
  const shuffle = (arr) => {
      for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  };
 
  const randomNames = shuffle(players);
  
  const matches = randomNames.map((name, index) => {
      return {
      santaName: name.split('~')[0],
      receiverName: (randomNames[index + 1] || randomNames[0]).split('~')[0],
      santa: name.split('~')[1],
      receiver: (randomNames[index + 1] || randomNames[0]).split('~')[1],
      };
  });
  console.log(matches)
  for (let i = 0;i < matches.length; i++ ){
    console.log(matches[i])
  }
  for (let i =0; i < matches.length; i++){
    var templateParams = {
      receiverMail:matches[i].receiver,
      reciverName:matches[i].receiverName,
      santaName:matches[i].santaName,
      santaEmail: matches[i].santa,
      budget:budget
  };
   
  emailjs.send('service_b38za18', 'template_ed7n5xh', templateParams, 'Q7lWdDmc7LlpNWzVv')
      .then(function(response) {
         console.log('SUCCESS!', response.status, response.text);
      }, function(error) {
         console.log('FAILED...', error);
      });
  }

}else {
  setstartModalWindowTextContent(`–∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ –≤ –∫—ñ–º–Ω–∞—Ç—ñ - ${players.length}, —Ü–µ –Ω–µ –ø–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å,
  —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É, –¥–æ–±–∞–≤—Ç–µ –≥—Ä–∞–≤—Å—è - —É –∫–æ–∂–Ω–æ–≥–æ –º–∞—î –±—É—Ç–∏ —Ç–∞—î–º–Ω–∏–π —Å–∞–Ω—Ç–∞ —ñ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ –º–∞—î –±—É—Ç–∏ –ø–∞—Ä–Ω–æ—é
  `)
  setbtnClassChangeDoneMailResult('none')
} 

  }

  return (
    <>

          <ChristmasLights />
          <Nav />


    <div className='indexApp'>
    <div className='wrapper'>
    <div className='imgWrapper'>
          <Image  src={leaf}/>
    </div>
    <div className='gameForm-wrapper'>
    <div className="gameForm">



  {/* —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ì—Ä—É–ø—É */} 
  <button type="button" className="btn gameForm-btn" data-bs-toggle="modal" data-bs-target="#createGroup">–°—Ç–≤–æ—Ä–∏—Ç–∏ –ö—ñ–º–Ω–∞—Ç—É üéÖ</button>
      <div
        className="modal fade"
        id="createGroup"
        tabIndex="-1"
        aria-labelledby="exampleModalLabel"
        aria-hidden="true"
      >
        <div className="modal-dialog">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title" id="exampleModalLabel">
              –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É–ø—É 
              </h5>
              <button
                type="button"
                className="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div className="modal-body">
  <form onSubmit={createForm} className='modalFrom-wrapper'>
      <label htmlFor="name">üéÑ –¢–≤–æ—î –Ü–º'—èüéÑ  <span>(–í–∫–∞–∂–∏ –ø–æ–≤–Ω–µ –Ü–º'—è —Ç–∞ –ù–æ–≤—É –ø–æ—à—Ç—É(–ú—ñ—Å—Ç–æ),—Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ü—å–æ–º—É –ø–æ–ª—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É, —è–∫—â–æ –≤–∏ –≥—Ä–∞—î—Ç–µ –∑ –ø–µ—Ä–µ—Å–∏–ª–∫–æ—é)</span></label>
      <input type="text" id="name"  onChange={(e) => setName(e.target.value)} name="name" />

      <label htmlFor="mail">üéÑ –¢–≤—ñ–π Email üéÑ</label>
      <input type="text" id="mail" onChange={(e) => setMail(e.target.value)} name="mail" />

  
      <label htmlFor="budget">üéÑ –ë—é–¥–∂–µ—Ç –Ω–∞ 1 –ø–æ–¥–∞—Ä—É–Ω–æ–∫ üéÑ</label>
      <input type="text" id="budget" onChange={(e) => setBudget(e.target.value)} name="budget" />

      <button type="submit"  onClick={closeCreateModalWindow}  data-bs-dismiss="modal" aria-label="Close">–°—Ç–≤–æ—Ä–∏—Ç–∏</button>
    </form>
    
            </div>
            
          </div>
        </div>
      </div>

  {/* –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –î–æ –ì—Ä—É–ø–∏ */}
  <button type="button" className="btn gameForm-btn" data-bs-toggle="modal" data-bs-target="#connecttoGroup">–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ –ö—ñ–º–Ω–∞—Ç–∏ üßë‚ÄçüéÑ</button>
      <div
        className="modal fade"
        id="connecttoGroup"
        tabIndex="-1"
        aria-labelledby="exampleModalLabel"
        aria-hidden="true"
      >
        <div className="modal-dialog">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title" id="exampleModalLabel">
                –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ –≥—Ä—É–ø–∏
              </h5>
              <button
                type="button"
                className="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div className="modal-body">
                <form onSubmit={connectForm} className='modalFrom-wrapper'>
      <label htmlFor="name">üéÑ –¢–≤–æ—î –Ü–º'—è üéÑ 
      <span>
      (–í–∫–∞–∂–∏ –ø–æ–≤–Ω–µ –Ü–º'—è —Ç–∞ –ù–æ–≤—É –ø–æ—à—Ç—É,—Ç–µ–ª–µ—Ñ–æ–Ω <br></br>
      –≤ —Ü—å–æ–º—É –ø–æ–ª—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É, —è–∫—â–æ –≤–∏ –≥—Ä–∞—î—Ç–µ –∑ –ø–µ—Ä–µ—Å–∏–ª–∫–æ—é)</span></label>
      <input type="text" id="name"onChange={(e) => setName(e.target.value)}  name="name" required />

      <label htmlFor="mail">üéÑ –¢–≤—ñ–π Email üéÑ</label>
      <input type="text" id="mail"  onChange={(e) => setMail(e.target.value)} name="mail" required />

      <label htmlFor="budget">üéÑ –ö–æ–¥ –≥—Ä—É–ø–∏ üéÑ</label>
      <input type="text" id="code" name="code" onChange={(e) => setCode(e.target.value)} required />

      <button type="submit"  onClick={closeConnectModalWindow}  data-bs-dismiss="modal" aria-label="Close">–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å</button>
    </form>
    
            </div>
          </div>
        </div>
      </div>

  {/* –°—Ç–∞—Ä—Ç –ì—Ä–∏ */}
    <button type="button" className="btn gameForm-btn" data-bs-toggle="modal" data-bs-target="#startGame">–°—Ç–∞—Ä—Ç –≥—Ä–∏ üßë‚ÄçüéÑ</button>
      <div
        className="modal fade"
        id="startGame"
        tabIndex="-1"
        aria-labelledby="exampleModalLabel"
        aria-hidden="true"
      >
        <div className="modal-dialog">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title" id="startGame">
                –°—Ç–∞—Ä—Ç –≥—Ä–∏
              </h5>
              <button
                type="button"
                className="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div className="modal-body">
            <form onSubmit={startForm} className='modalFrom-wrapper'>
      <label htmlFor="code">üéÑ –ö–æ–¥ –≥—Ä—É–ø–∏ üéÑ
      <span>
      –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑–ø–æ—á–∏–Ω–∞—Ç–∏ –≥—Ä—É, —è–∫—â–æ –≤—Å—ñ <br></br>
      –≥—Ä–∞–≤—Ü—ñ —â–µ –Ω–µ –≤ –≥—Ä—É–ø—ñ, –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è, <br></br>
      —â–æ–± –≥—Ä—É —Ä–æ–∑–ø–æ—á–∏–Ω–∞–≤ —Ç–æ–π, —Ö—Ç–æ —Å—Ç–≤–æ—Ä—é–≤–∞–≤ –≥—Ä—É–ø—É</span></label>
      <input type="text" id="code"  onChange={(e) => setCode(e.target.value)} name="code" />

      <button type="submit"  onClick={closeStartModalWindow}  data-bs-dismiss="modal" aria-label="Close">–ü–æ—á–∞—Ç–∏ –≥—Ä—É</button>
    </form>
            </div>
          </div>
        </div>
      </div>
  
    </div>
    </div>
    {/* –≤—ñ–∫–Ω–æ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏ */}
    <div  className={isShownCreateModal ? 'showing' : 'not-showing'}> 
      <div className='compliteForm'>
      <div className='close'>
      <button className='close-btn' onClick={closeCreateModalWindow}>x</button>
      </div>
      <div className='content'>
      <span>{createModalWindowTextContent}</span>
      </div>
      </div>
    </div> 
     {/* –≤—ñ–∫–Ω–æ –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ */}
     <div  className={isShownConnectWindow ? 'showing' : 'not-showing'}> 
      <div className='compliteForm'>
      <div className='close'>
      <button className='close-btn' onClick={closeConnectModalWindow}>x</button>
      </div>
      <div className='content'>
      <span>{connectModalWindowTextContent}</span>
      </div>
      </div>
    </div> 
    {/* –≤—ñ–∫–Ω–æ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏ */}
    <div  className={isShownStartModal ? 'showing' : 'not-showing'}> 
      <div className='compliteForm'>
      <div className='close'>
      <button className='close-btn' onClick={closeStartModalWindow}>x</button>
      </div> 
      <div className='contentWindowStartGame'>
      {startModalWindowTextContent}
      {allPlayers.map((player) => {
          return <>
          <h5 >{player}</h5>
        
          </>
        })}
        <button type="button" method="post" className={btnClassChangeDoneMailResult} onClick={startEmailsGame} >–≤—Å–µ –≤—ñ—Ä–Ω–æ üßë‚ÄçüéÑ</button>

     
      </div>
    
      </div>  
    </div> 
   
    </div>
          <Description />
    </div>
    </>
  )
}


